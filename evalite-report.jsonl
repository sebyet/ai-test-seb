{"filepath":"/Users/sebastien.payet/Projects/sandbox/ai-test-seb/trace.eval.ts","name":"My Eval","score":0.36363636363636365,"duration":4,"results":[{"input":"Hello","result":"World!","expected":"Hello World","scores":[{"name":"Levenshtein","score":0.36363636363636365}],"duration":3,"score":0.36363636363636365,"traces":[]}],"startTime":"2024-12-06T08:30:56.948Z","sourceCodeHash":"946078724ef0e8fe0ab7ab1a3d322a339e303338f5880bcd4446e1312ef36b88"}
{"filepath":"/Users/sebastien.payet/Projects/sandbox/ai-test-seb/trace.eval.ts","name":"My Eval","score":0.36363636363636365,"duration":3,"results":[{"input":"Hello","result":"World!","expected":"Hello World","scores":[{"name":"Levenshtein","score":0.36363636363636365}],"duration":3,"score":0.36363636363636365,"traces":[]}],"startTime":"2024-12-06T08:30:59.443Z","sourceCodeHash":"946078724ef0e8fe0ab7ab1a3d322a339e303338f5880bcd4446e1312ef36b88"}
{"filepath":"/Users/sebastien.payet/Projects/sandbox/ai-test-seb/trace.eval.ts","name":"My Eval","score":1,"duration":688,"results":[{"input":"Hello","result":"Hello World","expected":"Hello World","scores":[{"name":"Levenshtein","score":1}],"duration":687,"score":1,"traces":[]}],"startTime":"2024-12-06T08:31:26.497Z","sourceCodeHash":"946078724ef0e8fe0ab7ab1a3d322a339e303338f5880bcd4446e1312ef36b88"}
{"filepath":"/Users/sebastien.payet/Projects/sandbox/ai-test-seb/tweet.eval.ts","name":"Content generation","score":1,"duration":3,"results":[{"input":"Write a TypeScript tweet","result":"TypeScript enhances JavaScript by adding static types, making your code more robust and easier to maintain. Check out this simple example: \n\n```typescript\nfunction greet(name: string): string {\n    return `Hello, ${name}!`;\n}\n\nconsole.log(greet(\"World\"));\n```\n\nEmbrace type safety in your projects!","scores":[{"name":"No Hashtags","score":1}],"duration":2,"score":1,"traces":[]},{"input":"Write a tweet about TypeScript template literal types.","result":"TypeScript template literal types allow you to create new string types by combining existing string literals. For example:\n\n```typescript\ntype Event = \"click\" | \"hover\";\ntype EventHandler = `on${Capitalize<Event>}`;\n```\n\nThis creates types like `onClick` and `onHover`, enhancing type safety and clarity in your code!","scores":[{"name":"No Hashtags","score":1}],"duration":2,"score":1,"traces":[]},{"input":"Write a tweet about \"TypeScript is a superset of JavaScript.\"","result":"TypeScript is a superset of JavaScript, meaning it builds on JavaScript by adding static types. This allows for better tooling and error checking. For example, you can define a function with specific parameter types: \n\n```typescript\nfunction greet(name: string): string {\n    return `Hello, ${name}`;\n}\n``` \n\nEmbrace TypeScript for more robust code!","scores":[{"name":"No Hashtags","score":1}],"duration":2,"score":1,"traces":[]},{"input":"Write an article about TypeScript's basic types, like string and number.","result":"TypeScript offers a variety of basic types that help developers create more robust and maintainable code. Here are some of the fundamental types:\n\n1. **Number**: This type represents both integer and floating-point numbers. TypeScript uses the same number type as JavaScript, which is based on the IEEE 754 standard.\n\n   Example:\n   ```typescript\n   let age: number = 30;\n   let price: number = 19.99;\n   ```\n\n2. **String**: This type is used for textual data. Strings can be defined using single quotes, double quotes, or backticks for template literals.\n\n   Example:\n   ```typescript\n   let name: string = \"Alice\";\n   let greeting: string = `Hello, ${name}`;\n   ```\n\n3. **Boolean**: This type represents a logical value that can be either true or false.\n\n   Example:\n   ```typescript\n   let isActive: boolean = true;\n   ```\n\n4. **Array**: TypeScript allows you to define arrays of a specific type. You can use either the array type syntax or the generic array type.\n\n   Example:\n   ```typescript\n   let numbers: number[] = [1, 2, 3];\n   let fruits: Array<string> = [\"apple\", \"banana\", \"cherry\"];\n   ```\n\n5. **Tuple**: A tuple is a special type of array that allows you to define an array with fixed sizes and types for each element.\n\n   Example:\n   ```typescript\n   let person: [string, number] = [\"Bob\", 25];\n   ```\n\n6. **Enum**: Enums are a way to define a set of named constants. They can be numeric or string-based.\n\n   Example:\n   ```typescript\n   enum Color {\n       Red,\n       Green,\n       Blue\n   }\n   let c: Color = Color.Green;\n   ```\n\n7. **Any**: The `any` type allows you to opt-out of type checking. It can hold any value, but using it can lead to less type safety.\n\n   Example:\n   ```typescript\n   let randomValue: any = 42;\n   randomValue = \"Now I'm a string\";\n   ```\n\n8. **Void**: This type is used for functions that do not return a value.\n\n   Example:\n   ```typescript\n   function logMessage(message: string): void {\n       console.log(message);\n   }\n   ```\n\n9. **Null and Undefined**: These types represent the absence of a value. By default, `null` and `undefined` are subtypes of all other types.\n\n   Example:\n   ```typescript\n   let u: undefined = undefined;\n   let n: null = null;\n   ```\n\nUnderstanding these basic types is essential for leveraging TypeScript's capabilities to create type-safe applications.","scores":[{"name":"No Hashtags","score":1}],"duration":2,"score":1,"traces":[]}],"startTime":"2024-12-06T08:31:48.823Z","sourceCodeHash":"946078724ef0e8fe0ab7ab1a3d322a339e303338f5880bcd4446e1312ef36b88"}
